#!/bin/bash -e

script_dir=$(dirname "$0")
source "${script_dir}/setup"

# if namespace or deployment does not exist exit
exit_code=0
kubectl get deployment/mysql &>/dev/null || exit_code=$?
if [[ $exit_code != 0 ]]; then
    exit 0;
fi

function drop_database() {
    local database="${1}"
    local user="${database}"

    local drop_database_sql=$(cat \
<<SQL
    DROP DATABASE IF EXISTS \`${database}\`;
    DROP USER IF EXISTS \`${user}\`;
SQL
    )

    local mysql_output="/dev/null"
    if [[ ${MYSQL_DEBUG} != false ]]; then
        mysql_output="/dev/stdout"
    fi

    local exit_code=0
    echo "${drop_database_sql}" | mysql &>${mysql_output} || exit_code=$?
    if [[ $exit_code != 0 ]]; then
        echo "Failed to drop database ${database}" >&2
        return $exit_code
    fi

    echo "Dropped database ${database}"
}

function delete_deployment() {
    local output="$(mysql --raw --batch -se "SELECT count(SCHEMA_NAME) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN (\"information_schema\", \"sys\", \"performance_schema\", \"mysql\");")"

    if [[ "${output}" > 0 ]]; then
        echo "Skipping deleting deployment/mysql due to databases(s): ${output}"
        return 0
    fi

    kubectl delete -k ${script_dir}/k8s
}

databases=(${MYSQL_DATABASES//,/ })

for database in "${databases[@]}"; do
    drop_database "${database}"
done

delete_deployment
